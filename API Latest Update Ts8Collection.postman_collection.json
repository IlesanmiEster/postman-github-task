{
	"info": {
		"_postman_id": "34858d8f-69d2-4bcb-8e4c-8b5d286da024",
		"name": "API Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24217984"
	},
	"item": [
		{
			"name": "Get all to do entries",
			"item": [
				{
					"name": "Get All Todo Entries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"})\r",
									"pm.test(\"Status code name should have an Ok string\", function () {\r",
									"    pm.response.to.have.status(\"Ok\");\r",
									"});\r",
									"var jsonData = pm.response.json();\r",
									"console.log(jsonData.entry[1].title);\r",
									"\r",
									"pm.environment.set(\"apiVersion\", jsonData.entry[1].title);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/todo",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"todo"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get all Entries",
			"item": [
				{
					"name": "Get All Entries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Categories = pm.response.json();\r",
									"\r",
									"console.log(Categories.categories);\r",
									"\r",
									"pm.environment.set(\"Categories\", Categories.categories);\r",
									"\r",
									"\r",
									"const Title = pm.response.json();\r",
									"\r",
									"console.log(Title.title);\r",
									"\r",
									"pm.environment.set(\"title\", Title.title);\r",
									"\r",
									"\r",
									"const PaymentCurrency = pm.response.json();\r",
									"\r",
									"console.log(PaymentCurrency.paymentCurrency);\r",
									"\r",
									"pm.environment.set(\"paymentCurrency\", PaymentCurrency.paymentCurrency);\r",
									"\r",
									"\r",
									"\r",
									"const ApiVersion = pm.response.json();\r",
									"\r",
									"console.log(ApiVersion.apiVersion);\r",
									"\r",
									"pm.environment.set(\"apiVersion\", ApiVersion.apiVersion);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name should have an OK string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"console.log(jsonData)\r",
									"console.log(jsonData.apiVersion)\r",
									"console.log(jsonData.title)\r",
									"console.log(jsonData.paymentCurrency)\r",
									"\r",
									"pm.test(\"apiVersion should be 6.3.8.0\", function () {\r",
									"    \r",
									"    pm.expect(jsonData.apiVersion).to.eql(\"6.3.8.0\");\r",
									"});\r",
									"\r",
									"pm.test(\"title should be Fusio\", function () {\r",
									"\r",
									"pm.expect(jsonData.title).to.eql(\"Fusio\");\r",
									"});\r",
									"\r",
									"pm.test(\"paymentCurrency should be EUR\", function () {\r",
									"\r",
									"pm.expect(jsonData.paymentCurrency).to.eql(\"EUR\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"consumer\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"authorization\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"system\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"backend\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"default\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}",
							"host": [
								"{{baseurl}}"
							]
						},
						"description": "https://demo.fusio-project.org/index.php/"
					},
					"response": []
				}
			]
		},
		{
			"name": "Get entry per ID",
			"item": [
				{
					"name": "Get entry per ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name should have an OK string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://demo.fusio-project.org/index.php/todo/?todo_id=1",
							"protocol": "https",
							"host": [
								"demo",
								"fusio-project",
								"org"
							],
							"path": [
								"index.php",
								"todo",
								""
							],
							"query": [
								{
									"key": "todo_id",
									"value": "1"
								}
							]
						},
						"description": "https://demo.fusio-project.org/index.php/todo/:todo_id"
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Books",
			"item": [
				{
					"name": "Get Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {\r",
									"pm.test(\"Status code name have an OK string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"   \r",
									"   \r",
									"   const response = pm.response.json();\r",
									"console.log(response[2].id);\r",
									"pm.environment.set(\"JustMeID\", response[2].id);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"console.log(jsonData)\r",
									"\r",
									"pm.test(\"jsonData\", function () {\r",
									"    \r",
									"\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Body matches The Russia string \", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"The Russia\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches true string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"true\");\r",
									"});\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body 1 string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"1\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches name string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"name\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches fiction string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"fiction\");\r",
									"});\r",
									"/*const response = pm.response.json();\r",
									"// print any kind of variables/message on the screen\r",
									"console.log(response[2].name);\r",
									"pm.test(\"Search for a book name called Viscount Who Loved Me\", function (){\r",
									"    pm.expect(response[3].name).to.eql(\"Viscount Who Loved Me\")\r",
									"});\r",
									"\r",
									"const Fiction = response.filter((book) => book.type === \"fiction\");\r",
									"console.log(Fiction)\r",
									"//Print out the id of a fiction book that is available called \"The Midnight Library\"*/\r",
									"\r",
									"const Fiction = response.filter((book) => book.type === \"fiction\" && book.available === true && book.name === \"Viscount Who Loved Me\")\r",
									"\r",
									"console.log(Fiction[0].id);\r",
									"\r",
									"pm.test(\"The id number of a fiction book that available with the name The Midnight Library is \" , function () {\r",
									"    pm.expect(Fiction[0].name).eql(\"Viscount Who Loved Me\")\r",
									"});\r",
									"\r",
									"pm.globals.set(\"bookId\", Fiction[0].id);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurlbooks}}/books?type=fiction",
							"host": [
								"{{baseurlbooks}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "type",
									"value": "fiction"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Place a book order",
			"item": [
				{
					"name": "Place a book order using valid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const OrderID = pm.response.json();\r",
									"\r",
									"console.log(OrderID.orderId);\r",
									"\r",
									"pm.environment.set(\"orderId\", OrderID.orderId);\r",
									"\r",
									"\r",
									"\r",
									" var jsonData = pm.response.json();\r",
									"console.log(jsonData)\r",
									"console.log(jsonData.created)\r",
									"\r",
									"pm.response.to.have.status(\"Created\");\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"created should be true\", function () {\r",
									"    \r",
									"    pm.expect(jsonData.created).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches orderId string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"orderId\");\r",
									"});\r",
									"pm.test(\"Body matches created string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"created\");\r",
									"    });\r",
									"pm.test(\"Body matches true string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"true\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Body matches created string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"created\")\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status code should be 201\", function () {\r",
									"pm.test(\"Status code name should have an OK string\", function () {\r",
									"\r",
									"});\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "6cd9b36426ebc8798b0ea0cea12bb3684f263b8b920bbd5bb9b3dd94d1c97d2e",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bookId\": {{JustMeID}},\n  \"customerName\": \"Peace\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlbooks}}/orders",
							"host": [
								"{{baseurlbooks}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Place a book order - using invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const OrderId = pm.response.json();\r",
									"pm.test(\"Status code should be 201\", function () {\r",
									"pm.test(\"Status code name should have an OK string\", function () {\r",
									"\r",
									"});\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"console.log(OrderId.orderId);\r",
									"pm.globals.set(\"OrderId\", OrderId.orderId);\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"console.log(jsonData)\r",
									"console.log(jsonData.orderId)\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									" var jsonData = pm.response.json();\r",
									"console.log(jsonData)\r",
									"console.log(jsonData.created)\r",
									"\r",
									"pm.response.to.have.status(\"Created\");\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"created should be true\", function () {\r",
									"    \r",
									"    pm.expect(jsonData.created).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches orderId string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"orderId\");\r",
									"});\r",
									"pm.test(\"Body matches created string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"created\");\r",
									"    });\r",
									"pm.test(\"Body matches true string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"true\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Body matches created string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"created\");\r",
									"    });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "5617c4b863f89aa4221c841b53bdea5e75e2b0a1b54a400b617b33cff5ea0bd5",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bookId\": {{JustMeID}},\n  \"customerName\": \"Bola\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlbooks}}/orders",
							"host": [
								"{{baseurlbooks}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Place a book order",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const OrderId = pm.response.json();\r",
									"\r",
									"console.log(OrderId.orderId);\r",
									"pm.globals.set(\"OrderId\", OrderId.orderId);\r",
									""
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "03c5abfe090876ab74a2a2ac4c079174a35fd88c9b88cd2164ff4b9d56c31d6c",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bookId\": 1,\n  \"customerName\": \"John\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://simple-books-api.glitch.me/orders",
							"protocol": "https",
							"host": [
								"simple-books-api",
								"glitch",
								"me"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get all orders",
			"item": [
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name should have an OK string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"console.log(jsonData)\r",
									"\r",
									"pm.test(\"jsonData\", function () {\r",
									" \r",
									"    })\r",
									"\r",
									"\r",
									"pm.test(\"Body matches bookId string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"bookId\");\r",
									"});\r",
									"pm.test(\"Body matches customerName string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"customerName\");\r",
									"});\r",
									"pm.test(\"Body matches createdBy string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"createdBy\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches timestamp string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"timestamp\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches quantity string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"quantity\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "6cd9b36426ebc8798b0ea0cea12bb3684f263b8b920bbd5bb9b3dd94d1c97d2e",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlbooks}}/orders",
							"host": [
								"{{baseurlbooks}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get an Order",
			"item": [
				{
					"name": "Get an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name should have an OK string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Your test name\", function () {\r",
									"   console.log(jsonData)\r",
									"console.log(jsonData.id)\r",
									"console.log(jsonData.bookId)\r",
									"console.log(jsonData.customerName)\r",
									"    pm.expect(jsonData.id).to.eql(\"H5MXluvz9D7SpDEl6XWPe\");\r",
									"});\r",
									"\r",
									"pm.test(\"jsonData\", function () {\r",
									"   \r",
									"    pm.expect(jsonData.bookId).to.eql(4);\r",
									"});\r",
									"pm.test(\"jsonData.customerName\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.customerName).to.eql(\"Peace\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches bookId string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"bookId\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches customerName string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"customerName\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "6cd9b36426ebc8798b0ea0cea12bb3684f263b8b920bbd5bb9b3dd94d1c97d2e",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerName\": \"Eriife\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlbooks}}/orders/:orderId",
							"host": [
								"{{baseurlbooks}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name should have an OK string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Your test name\", function () {\r",
									"   console.log(jsonData)\r",
									"console.log(jsonData.id)\r",
									"console.log(jsonData.bookId)\r",
									"console.log(jsonData.customerName)\r",
									"    pm.expect(jsonData.id).to.eql(\"H5MXluvz9D7SpDEl6XWPe\");\r",
									"});\r",
									"\r",
									"pm.test(\"jsonData\", function () {\r",
									"   \r",
									"    pm.expect(jsonData.bookId).to.eql(4);\r",
									"});\r",
									"pm.test(\"jsonData.customerName\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.customerName).to.eql(\"Peace\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches bookId string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"bookId\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches id string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches customerName string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"customerName\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "6cd9b36426ebc8798b0ea0cea12bb3684f263b8b920bbd5bb9b3dd94d1c97d2e",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerName\": \"Eriife\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlbooks}}/orders/:orderId",
							"host": [
								"{{baseurlbooks}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete an order",
			"item": [
				{
					"name": "Delete an order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name should have an OK string\", function () {\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "5617c4b863f89aa4221c841b53bdea5e75e2b0a1b54a400b617b33cff5ea0bd5",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://simple-books-api.glitch.me/orders/:orderId",
							"protocol": "https",
							"host": [
								"simple-books-api",
								"glitch",
								"me"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}